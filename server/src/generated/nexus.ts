/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Convo: { // root type
    id: number; // Int!
    memberOneId: number; // Int!
    memberTwoId: number; // Int!
  }
  Delivery: { // root type
    deliveryBuildingPlaceId: number; // Int!
    id: number; // Int!
    orderStatus: string; // String!
    resturantPlaceId: number; // Int!
    userId: number; // Int!
  }
  DeliveryBuilding: { // root type
    placeId: number; // Int!
  }
  Match: { // root type
    completed: boolean; // Boolean!
    delivererAccepted: boolean; // Boolean!
    deliveryId: number; // Int!
    id: number; // Int!
    orderId: number; // Int!
    ordererAccepted: boolean; // Boolean!
  }
  Message: { // root type
    convoId: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    recieverId: number; // Int!
    senderId: number; // Int!
    text: string; // String!
  }
  Mutation: {};
  Order: { // root type
    deliveryBuildingPlaceId: number; // Int!
    id: number; // Int!
    orderStatus: string; // String!
    resturantPlaceId: number; // Int!
    userId: number; // Int!
  }
  Place: { // root type
    city: string; // String!
    fullAddress: string; // String!
    googlePlaceId: string; // String!
    id: number; // Int!
    name: string; // String!
    state: string; // String!
    streetAddress: string; // String!
    zipcode: number; // Int!
  }
  Query: {};
  Resturant: { // root type
    placeId: number; // Int!
  }
  Subscription: {};
  User: { // root type
    dateCreated: NexusGenScalars['DateTime']; // DateTime!
    delivering: boolean; // Boolean!
    email: string; // String!
    emailVerified: boolean; // Boolean!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    password: string; // String!
    picture?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Convo: { // field return type
    id: number; // Int!
    memberOne: NexusGenRootTypes['User'] | null; // User
    memberOneId: number; // Int!
    memberTwo: NexusGenRootTypes['User'] | null; // User
    memberTwoId: number; // Int!
    messages: Array<NexusGenRootTypes['Message'] | null>; // [Message]!
  }
  Delivery: { // field return type
    deliveryBuilding: NexusGenRootTypes['DeliveryBuilding'] | null; // DeliveryBuilding
    deliveryBuildingPlaceId: number; // Int!
    id: number; // Int!
    orderStatus: string; // String!
    resturant: NexusGenRootTypes['Resturant'] | null; // Resturant
    resturantPlaceId: number; // Int!
    user: NexusGenRootTypes['User'] | null; // User
    userId: number; // Int!
  }
  DeliveryBuilding: { // field return type
    place: NexusGenRootTypes['Place'] | null; // Place
    placeId: number; // Int!
  }
  Match: { // field return type
    completed: boolean; // Boolean!
    delivererAccepted: boolean; // Boolean!
    delivery: NexusGenRootTypes['Delivery'] | null; // Delivery
    deliveryId: number; // Int!
    id: number; // Int!
    order: NexusGenRootTypes['Order'] | null; // Order
    orderId: number; // Int!
    ordererAccepted: boolean; // Boolean!
  }
  Message: { // field return type
    convo: NexusGenRootTypes['Convo'] | null; // Convo
    convoId: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    reciever: NexusGenRootTypes['User'] | null; // User
    recieverId: number; // Int!
    sender: NexusGenRootTypes['User'] | null; // User
    senderId: number; // Int!
    text: string; // String!
  }
  Mutation: { // field return type
    acceptMatch: NexusGenRootTypes['Match'] | null; // Match
    cancelDelivery: NexusGenRootTypes['Delivery'] | null; // Delivery
    cancelOrder: NexusGenRootTypes['Order'] | null; // Order
    createMessage: NexusGenRootTypes['Message'] | null; // Message
    createPlace: NexusGenRootTypes['Place'] | null; // Place
    declineMatch: NexusGenRootTypes['Match'] | null; // Match
    login: NexusGenRootTypes['User'] | null; // User
    register: NexusGenRootTypes['User'] | null; // User
    upsertDelivery: NexusGenRootTypes['Delivery'] | null; // Delivery
    upsertOrder: NexusGenRootTypes['Order'] | null; // Order
  }
  Order: { // field return type
    deliveryBuilding: NexusGenRootTypes['DeliveryBuilding'] | null; // DeliveryBuilding
    deliveryBuildingPlaceId: number; // Int!
    id: number; // Int!
    orderStatus: string; // String!
    resturant: NexusGenRootTypes['Resturant'] | null; // Resturant
    resturantPlaceId: number; // Int!
    user: NexusGenRootTypes['User'] | null; // User
    userId: number; // Int!
  }
  Place: { // field return type
    city: string; // String!
    fullAddress: string; // String!
    googlePlaceId: string; // String!
    id: number; // Int!
    name: string; // String!
    state: string; // String!
    streetAddress: string; // String!
    zipcode: number; // Int!
  }
  Query: { // field return type
    allDeliveries: Array<NexusGenRootTypes['Delivery'] | null>; // [Delivery]!
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    getConversation: Array<NexusGenRootTypes['Message'] | null>; // [Message]!
    getUserConversations: Array<NexusGenRootTypes['Convo'] | null>; // [Convo]!
    getUserDelivery: NexusGenRootTypes['Delivery'] | null; // Delivery
    getUserOrder: NexusGenRootTypes['Order'] | null; // Order
  }
  Resturant: { // field return type
    place: NexusGenRootTypes['Place'] | null; // Place
    placeId: number; // Int!
  }
  Subscription: { // field return type
    matchUpdate: NexusGenRootTypes['Match'] | null; // Match
    newMatch: NexusGenRootTypes['Match'] | null; // Match
    newMessage: NexusGenRootTypes['Message'] | null; // Message
  }
  User: { // field return type
    dateCreated: NexusGenScalars['DateTime']; // DateTime!
    delivering: boolean; // Boolean!
    email: string; // String!
    emailVerified: boolean; // Boolean!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    password: string; // String!
    picture: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Convo: { // field return type name
    id: 'Int'
    memberOne: 'User'
    memberOneId: 'Int'
    memberTwo: 'User'
    memberTwoId: 'Int'
    messages: 'Message'
  }
  Delivery: { // field return type name
    deliveryBuilding: 'DeliveryBuilding'
    deliveryBuildingPlaceId: 'Int'
    id: 'Int'
    orderStatus: 'String'
    resturant: 'Resturant'
    resturantPlaceId: 'Int'
    user: 'User'
    userId: 'Int'
  }
  DeliveryBuilding: { // field return type name
    place: 'Place'
    placeId: 'Int'
  }
  Match: { // field return type name
    completed: 'Boolean'
    delivererAccepted: 'Boolean'
    delivery: 'Delivery'
    deliveryId: 'Int'
    id: 'Int'
    order: 'Order'
    orderId: 'Int'
    ordererAccepted: 'Boolean'
  }
  Message: { // field return type name
    convo: 'Convo'
    convoId: 'Int'
    createdAt: 'DateTime'
    id: 'Int'
    reciever: 'User'
    recieverId: 'Int'
    sender: 'User'
    senderId: 'Int'
    text: 'String'
  }
  Mutation: { // field return type name
    acceptMatch: 'Match'
    cancelDelivery: 'Delivery'
    cancelOrder: 'Order'
    createMessage: 'Message'
    createPlace: 'Place'
    declineMatch: 'Match'
    login: 'User'
    register: 'User'
    upsertDelivery: 'Delivery'
    upsertOrder: 'Order'
  }
  Order: { // field return type name
    deliveryBuilding: 'DeliveryBuilding'
    deliveryBuildingPlaceId: 'Int'
    id: 'Int'
    orderStatus: 'String'
    resturant: 'Resturant'
    resturantPlaceId: 'Int'
    user: 'User'
    userId: 'Int'
  }
  Place: { // field return type name
    city: 'String'
    fullAddress: 'String'
    googlePlaceId: 'String'
    id: 'Int'
    name: 'String'
    state: 'String'
    streetAddress: 'String'
    zipcode: 'Int'
  }
  Query: { // field return type name
    allDeliveries: 'Delivery'
    allUsers: 'User'
    getConversation: 'Message'
    getUserConversations: 'Convo'
    getUserDelivery: 'Delivery'
    getUserOrder: 'Order'
  }
  Resturant: { // field return type name
    place: 'Place'
    placeId: 'Int'
  }
  Subscription: { // field return type name
    matchUpdate: 'Match'
    newMatch: 'Match'
    newMessage: 'Message'
  }
  User: { // field return type name
    dateCreated: 'DateTime'
    delivering: 'Boolean'
    email: 'String'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    password: 'String'
    picture: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    acceptMatch: { // args
      matchId: number; // Int!
    }
    cancelDelivery: { // args
      deliveryId: number; // Int!
    }
    cancelOrder: { // args
      orderId: number; // Int!
    }
    createMessage: { // args
      recieverId: number; // Int!
      senderId: number; // Int!
      text: string; // String!
    }
    createPlace: { // args
      city: string; // String!
      fullAddress: string; // String!
      googlePlaceId: string; // String!
      name: string; // String!
      state: string; // String!
      streetAddress: string; // String!
      zipcode: number; // Int!
    }
    declineMatch: { // args
      matchId: number; // Int!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    register: { // args
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
    }
    upsertDelivery: { // args
      deliveryBuildingPlaceId: number; // Int!
      orderStatus: string; // String!
      resturantPlaceId: number; // Int!
      userId: number; // Int!
    }
    upsertOrder: { // args
      deliveryBuildingPlaceId: number; // Int!
      orderStatus: string; // String!
      resturantPlaceId: number; // Int!
      userId: number; // Int!
    }
  }
  Query: {
    getConversation: { // args
      recieverId: number; // Int!
      senderId: number; // Int!
    }
    getUserConversations: { // args
      currentUserId: number; // Int!
    }
    getUserDelivery: { // args
      userId: number; // Int!
    }
    getUserOrder: { // args
      userId: number; // Int!
    }
  }
  Subscription: {
    newMessage: { // args
      recieverId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}