// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  firstName        String      @db.VarChar(255)
  lastName         String      @db.VarChar(255)
  email            String      @unique
  emailVerified    Boolean     @default(false)
  password         String
  picture          String?     @db.VarChar(512)
  dateCreated      DateTime    @default(now())
  lastLogin        DateTime?   @default(now())
  delivering       Boolean     @default(false)
  profile          Profile?
  university       University? @relation(fields: [universityId], references: [id])
  universityId     Int?
  recievedMessages Message[]   @relation("RecieverOfMessage")
  sentMessages     Message[]   @relation("SenderOfMessage")
  convosOne        Convo[]     @relation("ConvoMemberOne")
  convosTwo        Convo[]     @relation("ConvoMemberTwo")

  orders     Order[]
  deliveries Delivery[]
}

model Profile {
  id                     Int  @id @default(autoincrement())
  completedDeliveryCount Int  @default(0)
  completedOrderCount    Int  @default(0)
  user                   User @relation(fields: [userId], references: [id])
  userId                 Int  @unique
}

// DELIVERY/ORDER TABLES

model University {
  id          Int     @id @default(autoincrement())
  emailEnding String?
  fullName    String?
  place       Place   @relation(fields: [placeId], references: [id])
  placeId     Int
  students    User[]
}

model Order {
  id                      Int              @id @default(autoincrement())
  orderStatus             Status           @default(placed)
  user                    User             @relation(fields: [userId], references: [id])
  userId                  Int
  resturant               Resturant        @relation(fields: [resturantPlaceId], references: [placeId])
  deliveryBuilding        DeliveryBuilding @relation(fields: [deliveryBuildingPlaceId], references: [placeId])
  resturantPlaceId        Int
  deliveryBuildingPlaceId Int
  dateCreated             DateTime         @default(now())
  Match                   Match[]
}

model Delivery {
  id                      Int              @id @default(autoincrement())
  orderStatus             Status           @default(placed)
  user                    User             @relation(fields: [userId], references: [id])
  userId                  Int
  resturant               Resturant        @relation(fields: [resturantPlaceId], references: [placeId])
  deliveryBuilding        DeliveryBuilding @relation(fields: [deliveryBuildingPlaceId], references: [placeId])
  resturantPlaceId        Int
  deliveryBuildingPlaceId Int
  dateCreated             DateTime         @default(now())
  Match                   Match[]
}

model Resturant {
  place      Place      @relation(fields: [placeId], references: [id])
  placeId    Int        @unique
  orders     Order[]
  deliveries Delivery[]
}

model DeliveryBuilding {
  orders     Order[]
  deliveries Delivery[]
  place      Place      @relation(fields: [placeId], references: [id])
  placeId    Int        @unique
}

model Place {
  id               Int                @id @default(autoincrement())
  name             String
  fullAddress      String             @db.VarChar(255)
  streetAddress    String             @db.VarChar(255)
  state            String             @db.VarChar(255)
  city             String             @db.VarChar(255)
  zipcode          Int
  googlePlaceId    String             @unique
  University       University[]
  Resturant        Resturant[]
  DeliveryBuilding DeliveryBuilding[]
}

model Match {
  id                Int     @id @default(autoincrement())
  completed         Boolean
  delivererAccepted Boolean @default(false)
  ordererAccepted   Boolean @default(false)
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])
  deliveryId Int
  delivery   Delivery @relation(fields: [deliveryId], references: [id])

  @@unique([orderId, deliveryId])
}

// CHAT/MESSAGING TABLES
model Convo {
  id          Int       @id @default(autoincrement())
  memberOne   User      @relation("ConvoMemberOne", fields: [memberOneId], references: [id])
  memberOneId Int
  memberTwo   User      @relation("ConvoMemberTwo", fields: [memberTwoId], references: [id])
  memberTwoId Int
  messages    Message[]

  @@unique([memberOneId, memberTwoId], name: "members")
}

model Message {
  id         Int      @id @default(autoincrement())
  recieverId Int
  reciever   User     @relation("RecieverOfMessage", fields: [recieverId], references: [id])
  sender     User     @relation("SenderOfMessage", fields: [senderId], references: [id])
  senderId   Int
  text       String
  createdAt  DateTime @default(now())
  convo      Convo    @relation(fields: [convoId], references: [id])
  convoId    Int
}

enum Status {
  placed
  matched
  complete
  cancelled
}
